# -*- coding: utf-8 -*-
"""Predicting Sales using Advertising Costs

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UUoWBy-L6RNEcQwGeC3K2VK9o2Z1d0fW

## Objective:  Predict Sales Using Advertising Costs From Different Digital Platforms
"""

# IMPORT GENERIC PACKAGES
import numpy as np # numerical calc package
import pandas as pd # holds data
import matplotlib.pyplot as plt # plotting library
import seaborn as sns # pretty plotting

sns.set(rc={'figure.figsize':(20,10)})

from sklearn.linear_model import LinearRegression # linear regression package

# Simulating the unknown
from sklearn.model_selection import train_test_split # split dataset

from sklearn.linear_model import Lasso
from sklearn.linear_model import Ridge
from sklearn.metrics import mean_squared_error as mse

"""### Read Data"""

# read data into a DataFrame
data = pd.read_csv('Advertising.xlsx - Advertising.csv', index_col=0)

"""### Variables

- **TV**: advertising dollars spent on TV for a single product in a given market (in thousands of dollars)  
- **Radio**: advertising dollars spent on Radio  
- **Newspaper**: advertising dollars spent on Newspaper  

### Target  

- **Sales**: sales of a single product in a given market (in thousands of dollars)

# Linear Regression  
Linear Regression using Sklearn

The usual methodology for fitting datasets using sklearn is:  
1. Import package, 
2. Set Variables (X) and Target (y), 
3. Split the dataset to train-test.
4. Initialize model,
5. Fit X and y to model,
6. Extract coefficients (and intercept),
7. Get model metric (in our case, R-squared).
"""

data.tail(10)

"""### For now, we use all three variables to predict sales"""

data.columns

# Define Features
features = ['TV', 'radio', 'newspaper']

# Set X
X = data[features]

# Set y
y = data['sales']

# Train-test split to simulate the unknown
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.48, random_state = 50)

# Initialize model
model = LinearRegression()

# Fit Model
model.fit(X_train, y_train)

# get coefficients
coefficient = model.coef_

# get intercept
intercept = model.intercept_

# print coefficient
coefficient

# print intercept
intercept

# calculate the R-squared
model.score(X_test, y_test)

y_predicted = model.predict(X_test)

"""The equation of the line is just: 

$\begin {equation}
Sales = 0.049 * TV + 0.18 * Radio + 0.006 * newspaper + 2.11
\end {equation}$

### Interpreting the Coefficients
- For a given amount of Radio and Newspaper ad spending, an **increase of 1000 dollars in TV ad spending** is associated with an **increase in Sales of 49 thousand dollars** (assuming everything else is unchanged).

- For a given amount of TV and Newspaper ad spending, an **increase of 1000 dollars in Radio ad spending** is associated with an **increase in Sales of 187 thousand dollars** (assuming everything else is unchanged).
- For a given amount of TV and Radio ad spending, a **increase of 1000 dollars in newspaper ad spending** is associated with an **increase in Sales of 6 thousand dollars**.
"""

# put coefficients into dataframe
# pair the feature names with the coefficients
coefficients_pd = pd.DataFrame((list(zip(features, model.coef_ * 1000))), columns = ['Features', 'Coefficients'])

# print table of coefficients for contribution chart
coefficients_pd

"""### Contribution Chart"""

# Plot Contribution chart
coefficients_pd.sort_values('Coefficients').set_index('Features').plot(kind = 'barh', color = 'g')

"""### Actual Prediction of Sales Using New Advertising Data"""

# Input new advertising data into the model to predict future sales

# Sample TV, Radio, Newspaper
new_data = [[8, 2, 0]]
model.predict(new_data)

new_data = [[9, 1, 0]]
model.predict(new_data)

new_data = [[8, 1, 1]]
model.predict(new_data)

new_data = [[7, 2, 1]]
model.predict(new_data)

new_data = [[7, 3, 0]]
model.predict(new_data)

"""We can change the three values in `new_data` to see how much sales we can generate based on ad cost.

### Model Error
"""

np.sqrt(mse(y_predicted, y_test)) # Root mean squared error

"""Predictions should deviate from the real values only by about 1,560 dollars or so"""

